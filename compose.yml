

services:

  poll:
    build:
      context: ./poll
      dockerfile: Dockerfile
    ports:
      - "5000:80"
    env_file:
        - .env
    networks:
      - poll-tier
    depends_on:
      redis:
        condition: service_healthy
    restart: always

  result:
    build:
      context: ./result
      dockerfile: Dockerfile
    ports:
      - "5001:80"
    env_file:
      - .env
    networks:
        - result-tier
    depends_on:
      db:
        condition: service_healthy
    restart: always


  worker:
    build:
      context: ./worker
      dockerfile: Dockerfile
    env_file:
        - .env
    networks:
        - back-tier
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: always

  redis:
    image: "redis:8.0-M03-alpine"
    env_file:
      - .env
    ports:
      - "6379:6379"
    networks:
        - poll-tier
        - back-tier
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
    restart: always

  db:
    image: "postgres:17-alpine3.19"
    volumes:
      - ./schema.sql:/docker-entrypoint-initdb.d/1.sql
      - db-data:/var/lib/postgresql/data
    env_file:
        - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 5s
      timeout: 5s
    ports:
        - "5432:5432"
    networks:
        - result-tier
        - back-tier
    restart: always

networks:
  poll-tier:
  result-tier:
  back-tier:
volumes:
  db-data: